-- Place in StarterPlayerScripts or StarterGui
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local StatsService = game:GetService("Stats")

-- Create ScreenGui
local gui = Instance.new("ScreenGui")
gui.Name = "PrivateScriptGUI"
gui.Parent = player:WaitForChild("PlayerGui", 5)
gui.ResetOnSpawn = false

-- Create Main Frame (Draggable)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 600) -- Increased height for new Reset button
frame.Position = UDim2.new(0.5, -150, 0.5, -300)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 0
frame.Parent = gui
frame.Visible = true

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = frame

-- Function to create Tooltip
local function createTooltip(parent, text, pos)
    local tooltip = Instance.new("TextLabel")
    tooltip.Size = UDim2.new(0, 200, 0, 20)
    tooltip.Position = pos
    tooltip.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    tooltip.BackgroundTransparency = 0.2
    tooltip.Text = text
    tooltip.Font = Enum.Font.Gotham
    tooltip.TextSize = 12
    tooltip.TextColor3 = Color3.new(1, 1, 1)
    tooltip.Visible = false
    tooltip.Parent = parent
    local tooltipCorner = Instance.new("UICorner")
    tooltipCorner.CornerRadius = UDim.new(0, 4)
    tooltipCorner.Parent = tooltip
    return tooltip
end

-- Title Label
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Anti-System GUI"
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextColor3 = Color3.new(1, 1, 1)
title.Parent = frame

-- Separator Labels
local toggleLabel = Instance.new("TextLabel")
toggleLabel.Size = UDim2.new(1, 0, 0, 15)
toggleLabel.Position = UDim2.new(0, 0, 0.1, 0)
toggleLabel.BackgroundTransparency = 1
toggleLabel.Text = "Toggles"
toggleLabel.Font = Enum.Font.Gotham
toggleLabel.TextSize = 12
toggleLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
toggleLabel.Parent = frame

local actionLabel = Instance.new("TextLabel")
actionLabel.Size = UDim2.new(1, 0, 0, 15)
actionLabel.Position = UDim2.new(0, 0, 0.5, 0)
actionLabel.BackgroundTransparency = 1
actionLabel.Text = "Actions"
actionLabel.Font = Enum.Font.Gotham
actionLabel.TextSize = 12
actionLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
actionLabel.Parent = frame

local hotkeyLabel = Instance.new("TextLabel")
hotkeyLabel.Size = UDim2.new(1, 0, 0, 15)
hotkeyLabel.Position = UDim2.new(0, 0, 0.85, 0)
hotkeyLabel.BackgroundTransparency = 1
hotkeyLabel.Text = "Hotkeys"
hotkeyLabel.Font = Enum.Font.Gotham
hotkeyLabel.TextSize = 12
hotkeyLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
hotkeyLabel.Parent = frame

-- GUI Hotkey (Default Alt, Selectable)
local guiHotkey = Enum.KeyCode.LeftAlt
local guiHotkeyLabel = Instance.new("TextLabel")
guiHotkeyLabel.Size = UDim2.new(0.3, 0, 0, 30)
guiHotkeyLabel.Position = UDim2.new(0.05, 0, 0.95, 0)
guiHotkeyLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
guiHotkeyLabel.Text = "LeftAlt"
guiHotkeyLabel.Font = Enum.Font.Gotham
guiHotkeyLabel.TextSize = 14
guiHotkeyLabel.TextColor3 = Color3.new(1, 1, 1)
guiHotkeyLabel.Parent = frame

local guiHotkeyCorner = Instance.new("UICorner")
guiHotkeyCorner.CornerRadius = UDim.new(0, 6)
guiHotkeyCorner.Parent = guiHotkeyLabel

local guiHotkeySetBtn = Instance.new("TextButton")
guiHotkeySetBtn.Size = UDim2.new(0.15, 0, 0, 30)
guiHotkeySetBtn.Position = UDim2.new(0.4, 0, 0.95, 0)
guiHotkeySetBtn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
guiHotkeySetBtn.Text = "Set"
guiHotkeySetBtn.Font = Enum.Font.Gotham
guiHotkeySetBtn.TextSize = 14
guiHotkeySetBtn.TextColor3 = Color3.new(1, 1, 1)
guiHotkeySetBtn.Parent = frame

local guiSetCorner = Instance.new("UICorner")
guiSetCorner.CornerRadius = UDim.new(0, 6)
guiSetCorner.Parent = guiHotkeySetBtn

local waitingForGuiKey = false
guiHotkeySetBtn.MouseButton1Click:Connect(function()
    waitingForGuiKey = true
    guiHotkeyLabel.Text = "Press a key..."
end)

local guiHotkeySetTooltip = createTooltip(frame, "Sets hotkey to toggle GUI", UDim2.new(0.4, 0, 1.00, 0))
guiHotkeySetBtn.MouseEnter:Connect(function()
    guiHotkeySetTooltip.Visible = true
end)
guiHotkeySetBtn.MouseLeave:Connect(function()
    guiHotkeySetTooltip.Visible = false
end)

-- Function to create Button
local function createButton(parent, text, pos)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.3, 0, 0, 30)
    btn.Position = pos
    btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Parent = parent
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 6)
    btnCorner.Parent = btn
    return btn
end

-- Anti-System Variables
local antiVoidEnabled = false
local antiFlingEnabled = false
local antiAFKEnabled = true -- Enabled by default
local antiCrashEnabled = false
local antiKickEnabled = false
local antiBanEnabled = false
local lastPosition = nil
local voidThreshold = -500 -- Adjust based on game map
local maxFlingVelocity = 100 -- Adjust based on game physics
local maxInstances = 10000 -- Threshold for instance count
local maxPhysicsSteps = 1000 -- Threshold for physics steps per second
local lastInstanceCount = 0
local instanceCheckInterval = 5 -- Seconds between checks
local kickDetected = false
local lastActionTime = tick()
local actionCooldown = 0.1 -- Prevent rapid actions to avoid ban triggers
local maxActionsPerSecond = 10 -- Limit actions to avoid detection
local actionCount = 0

-- Toggle Buttons
local antiVoidToggle = createButton(frame, "Anti Void: OFF", UDim2.new(0.05, 0, 0.15, 0))
local antiVoidTooltip = createTooltip(frame, "Prevents falling through the map by teleporting to last safe position", UDim2.new(0.05, 0, 0.20, 0))
antiVoidToggle.MouseEnter:Connect(function()
    antiVoidTooltip.Visible = true
end)
antiVoidToggle.MouseLeave:Connect(function()
    antiVoidTooltip.Visible = false
end)

local antiFlingToggle = createButton(frame, "Anti Fling: OFF", UDim2.new(0.35, 0, 0.15, 0))
local antiFlingTooltip = createTooltip(frame, "Prevents being flung by capping velocity", UDim2.new(0.35, 0, 0.20, 0))
antiFlingToggle.MouseEnter:Connect(function()
    antiFlingTooltip.Visible = true
end)
antiFlingToggle.MouseLeave:Connect(function()
    antiFlingTooltip.Visible = false
end)

local antiAFKToggle = createButton(frame, "Anti AFK: ON", UDim2.new(0.65, 0, 0.15, 0))
antiAFKToggle.BackgroundColor3 = Color3.fromRGB(0, 150, 0) -- Green when ON
local antiAFKTooltip = createTooltip(frame, "Prevents kicking for being idle", UDim2.new(0.65, 0, 0.20, 0))
antiAFKToggle.MouseEnter:Connect(function()
    antiAFKTooltip.Visible = true
end)
antiAFKToggle.MouseLeave:Connect(function()
    antiAFKTooltip.Visible = false
end)

local antiCrashToggle = createButton(frame, "Anti Crash: OFF", UDim2.new(0.05, 0, 0.25, 0))
local antiCrashTooltip = createTooltip(frame, "Prevents crashes by monitoring instance count and physics load", UDim2.new(0.05, 0, 0.30, 0))
antiCrashToggle.MouseEnter:Connect(function()
    antiCrashTooltip.Visible = true
end)
antiCrashToggle.MouseLeave:Connect(function()
    antiCrashTooltip.Visible = false
end)

local antiKickToggle = createButton(frame, "Anti Kick: OFF", UDim2.new(0.35, 0, 0.25, 0))
local antiKickTooltip = createTooltip(frame, "Attempts to prevent server kicks by auto-rejoining", UDim2.new(0.35, 0, 0.30, 0))
antiKickToggle.MouseEnter:Connect(function()
    antiKickTooltip.Visible = true
end)
antiKickToggle.MouseLeave:Connect(function()
    antiKickTooltip.Visible = false
end)

local antiBanToggle = createButton(frame, "Anti Ban: OFF", UDim2.new(0.65, 0, 0.25, 0))
local antiBanTooltip = createTooltip(frame, "Reduces ban risk by limiting suspicious actions and auto-rejoining on kicks", UDim2.new(0.65, 0, 0.30, 0))
antiBanToggle.MouseEnter:Connect(function()
    antiBanTooltip.Visible = true
end)
antiBanToggle.MouseLeave:Connect(function()
    antiBanTooltip.Visible = false
end)

-- Action Buttons
local rejoinBtn = createButton(frame, "Rejoin", UDim2.new(0.05, 0, 0.55, 0))
local rejoinTooltip = createTooltip(frame, "Rejoins the game", UDim2.new(0.05, 0, 0.60, 0))
rejoinBtn.MouseEnter:Connect(function()
    rejoinTooltip.Visible = true
end)
rejoinBtn.MouseLeave:Connect(function()
    rejoinTooltip.Visible = false
end)

rejoinBtn.MouseButton1Click:Connect(function()
    if antiBanEnabled then
        local currentTime = tick()
        if currentTime - lastActionTime < actionCooldown then return end
        actionCount = actionCount + 1
        if actionCount > maxActionsPerSecond then return end
        lastActionTime = currentTime
    end
    TeleportService:Teleport(game.PlaceId, player)
end)

local resetBtn = createButton(frame, "Reset", UDim2.new(0.35, 0, 0.55, 0))
local resetTooltip = createTooltip(frame, "Resets your character", UDim2.new(0.35, 0, 0.60, 0))
resetBtn.MouseEnter:Connect(function()
    resetTooltip.Visible = true
end)
resetBtn.MouseLeave:Connect(function()
    resetTooltip.Visible = false
end)

resetBtn.MouseButton1Click:Connect(function()
    if antiBanEnabled then
        local currentTime = tick()
        if currentTime - lastActionTime < actionCooldown then return end
        actionCount = actionCount + 1
        if actionCount > maxActionsPerSecond then return end
        lastActionTime = currentTime
    end
    if player.Character then
        player.Character:BreakJoints()
    end
end)

-- Anti-System Functions
local function antiVoid()
    if not antiVoidEnabled then return end
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        if rootPart.Position.Y < voidThreshold then
            if lastPosition then
                if antiBanEnabled then
                    local currentTime = tick()
                    if currentTime - lastActionTime < actionCooldown then return end
                    actionCount = actionCount + 1
                    if actionCount > maxActionsPerSecond then return end
                    lastActionTime = currentTime
                end
                rootPart.CFrame = CFrame.new(lastPosition)
            end
        else
            lastPosition = rootPart.Position
        end
    end
end

local function antiFling()
    if not antiFlingEnabled then return end
    local character = player.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        if rootPart.Velocity.Magnitude > maxFlingVelocity then
            if antiBanEnabled then
                local currentTime = tick()
                if currentTime - lastActionTime < actionCooldown then return end
                actionCount = actionCount + 1
                if actionCount > maxActionsPerSecond then return end
                lastActionTime = currentTime
            end
            rootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

local function antiAFK()
    if not antiAFKEnabled then return end
    local VirtualUser = game:GetService("VirtualUser")
    if antiBanEnabled then
        local currentTime = tick()
        if currentTime - lastActionTime < actionCooldown then return end
        actionCount = actionCount + 1
        if actionCount > maxActionsPerSecond then return end
        lastActionTime = currentTime
    end
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end

local function antiCrash()
    if not antiCrashEnabled then return end
    -- Monitor instance count
    local instanceCount = 0
    for _, _ in pairs(game:GetDescendants()) do
        instanceCount = instanceCount + 1
        if instanceCount > maxInstances then
            if antiBanEnabled then
                local currentTime = tick()
                if currentTime - lastActionTime < actionCooldown then return end
                actionCount = actionCount + 1
                if actionCount > maxActionsPerSecond then return end
                lastActionTime = currentTime
            end
            -- Throttle by pausing physics
            RunService:Pause()
            wait(1)
            RunService:Run()
            break
        end
    end
    -- Monitor physics steps
    local physicsSteps = StatsService:GetTotalTimeSpentInPhysics()
    if physicsSteps > maxPhysicsSteps then
        if antiBanEnabled then
            local currentTime = tick()
            if currentTime - lastActionTime < actionCooldown then return end
            actionCount = actionCount + 1
            if actionCount > maxActionsPerSecond then return end
            lastActionTime = currentTime
        end
        -- Reduce physics load by disabling complex calculations
        for _, part in pairs(workspace:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Anchored = true
                wait(0.1)
                part.Anchored = false
            end
        end
    end
end

local function antiKick()
    if not (antiKickEnabled or antiBanEnabled) then return end
    -- Monitor for kick attempts by checking game connection status
    if player.Parent == nil and not kickDetected then
        kickDetected = true
        if antiBanEnabled then
            local currentTime = tick()
            if currentTime - lastActionTime < actionCooldown then return end
            actionCount = actionCount + 1
            if actionCount > maxActionsPerSecond then return end
            lastActionTime = currentTime
        end
        TeleportService:Teleport(game.PlaceId, player)
    end
end

-- Reset action count periodically
RunService.Heartbeat:Connect(function()
    if tick() - lastActionTime > 1 then
        actionCount = 0
    end
end)

-- Toggle Button Connections
antiVoidToggle.MouseButton1Click:Connect(function()
    antiVoidEnabled = not antiVoidEnabled
    antiVoidToggle.Text = "Anti Void: " .. (antiVoidEnabled and "ON" or "OFF")
    antiVoidToggle.BackgroundColor3 = antiVoidEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

antiFlingToggle.MouseButton1Click:Connect(function()
    antiFlingEnabled = not antiFlingEnabled
    antiFlingToggle.Text = "Anti Fling: " .. (antiFlingEnabled and "ON" or "OFF")
    antiFlingToggle.BackgroundColor3 = antiFlingEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

antiAFKToggle.MouseButton1Click:Connect(function()
    antiAFKEnabled = not antiAFKEnabled
    antiAFKToggle.Text = "Anti AFK: " .. (antiAFKEnabled and "ON" or "OFF")
    antiAFKToggle.BackgroundColor3 = antiAFKEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

antiCrashToggle.MouseButton1Click:Connect(function()
    antiCrashEnabled = not antiCrashEnabled
    antiCrashToggle.Text = "Anti Crash: " .. (antiCrashEnabled and "ON" or "OFF")
    antiCrashToggle.BackgroundColor3 = antiCrashEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

antiKickToggle.MouseButton1Click:Connect(function()
    antiKickEnabled = not antiKickEnabled
    antiKickToggle.Text = "Anti Kick: " .. (antiKickEnabled and "ON" or "OFF")
    antiKickToggle.BackgroundColor3 = antiKickEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

antiBanToggle.MouseButton1Click:Connect(function()
    antiBanEnabled = not antiBanEnabled
    antiBanToggle.Text = "Anti Ban: " .. (antiBanEnabled and "ON" or "OFF")
    antiBanToggle.BackgroundColor3 = antiBanEnabled and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(50, 50, 50)
end)

-- Draggable Frame
local dragging, dragInput, dragStart, startPos
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Input Handling for Hotkey
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if waitingForGuiKey then
            guiHotkey = input.KeyCode
            guiHotkeyLabel.Text = input.KeyCode.Name
            waitingForGuiKey = false
        elseif input.KeyCode == guiHotkey then
            frame.Visible = not frame.Visible
        end
    end
end)

-- Run Anti-System Checks
RunService.Heartbeat:Connect(function()
    antiVoid()
    antiFling()
    antiAFK()
    antiCrash()
    antiKick()
end)

-- Initialize last position and kick detection
player.CharacterAdded:Connect(function(character)
    lastPosition = nil
    kickDetected = false
    wait(1)
    if character:FindFirstChild("HumanoidRootPart") then
        lastPosition = character.HumanoidRootPart.Position
    end
end)
